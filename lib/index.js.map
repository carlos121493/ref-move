{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;;;;AAEA,SAAS,WAAT,CAAqB,QAArB,EAA+B;AAC9B,KAAI;AACH,MAAI,aAAG,YAAH,CAAgB,QAAhB,CAAJ,EAA+B;AAC9B,UAAO,IAAP;AACA;AACD,EAJD,CAIE,OAAM,CAAN,EAAS;AACV,SAAO,KAAP;AACA;AACD;;AAED,SAAS,WAAT,CAAqB,QAArB,EAA+B;AAC9B,KAAM,UAAU,QAAQ,QAAR,CAAhB;AACA,KAAG,OAAH,EAAY;AACX,SAAO,aAAG,YAAH,CAAgB,QAAhB,EAA0B,OAA1B,CAAP;AACA,EAFD,MAEO;AACN,SAAO,QAAP;AACA;AACD;;AAED,SAAS,YAAT,CAAsB,IAAtB,EAA4B;AAC3B,KAAM,UAAU,YAAY,IAAZ,CAAhB;AACA,QAAO,uBAAe,cAAf,CAA8B,OAA9B,EAAuC,MAAvC,CAA8C,uBAAe,OAAf,CAAuB,OAAvB,CAA9C,EAA+E,MAA/E,CAAsF;AAAA,SAAQ,uBAAe,gBAAf,CAAgC,IAAhC,CAAR;AAAA,EAAtF,KAAwI,EAA/I;AACA;;AAED,SAAS,WAAT,CAAqB,IAArB,EAA2B;AAC1B,QAAO,aAAa,IAAb,EAAmB,MAA1B;AACA;;AAED,SAAS,eAAT,CAAyB,MAAzB,EAAiC,IAAjC,EAAuC,OAAvC,EAAgD,SAAhD,EAA2D;AAC1D,KAAM,cAAc,YAAY,MAAZ,CAApB;AACA,KAAG,YAAY,MAAf,EAAuB;AAAA;AACtB,OAAM,WAAW,KAAK,OAAL,CAAa,MAAb,CAAjB;AACA,OAAM,WAAW,KAAK,QAAL,CAAc,MAAd,CAAjB;AACA,OAAM,UAAU,KAAK,OAAL,CAAa,IAAb,CAAhB;AACA,OAAI,CAAC,QAAD,IAAa,CAAC,OAAd,IAAyB,OAAO,OAAP,KAAmB,QAAhD,EAA0D;AACzD,UAAM,4CAAN;AACA;AACD,OAAM,UAAU,OAAO,OAAP,KAAmB,QAAnB,GAA8B,OAA9B,GAAwC,YAAY,MAAZ,CAAxD;AACA,OAAM,YAAY,IAAI,MAAJ,CAAW,aAAa,OAAb,EAAsB,IAAtB,CAA2B,GAA3B,CAAX,EAA4C,GAA5C,CAAlB;AACA,OAAM,kBAAkB,QAAQ,OAAR,CAAgB,SAAhB,EAA2B;AAAA,WAAQ,KAAK,IAAL,CAAU,KAAK,QAAL,CAAc,OAAd,EAAuB,MAAvB,CAAV,EAA0C,IAA1C,CAAR;AAAA,IAA3B,CAAxB;AACA,OAAI,SAAJ,EAAe;AACd,iBAAG,aAAH,CAAiB,IAAjB,EAAuB,eAAvB,EAAwC,OAAxC;AACA;AACD;AAAA,OAAO;AAAP;AAbsB;;AAAA;AActB;AACD,QAAO,OAAP;AAEA;;kBAEc;AACd,yBADc;AAEd,2BAFc;AAGd,yBAHc;AAId;AAJc,C","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport matchedRequire from 'match-require';\nimport {isRelative} from 'path';\nimport fs from 'fs';\n\nfunction hasFilePath(fileName) {\n\ttry {\n\t\tif (fs.realpathSync(fileName)) {\n\t\t\treturn true;\n\t\t}\t\n\t} catch(e) {\n\t\treturn false;\n\t}\n}\n\nfunction readContent(fileName) {\n\tconst hasPath = hasPath(fileName);\n\tif(hasPath) {\n\t\treturn fs.readFileSync(fileName, 'utf-8');\n\t} else {\n\t\treturn fileName;\n\t}\n}\n\nfunction findRelative(file) {\n\tconst content = readContent(file);\n\treturn matchedRequire.findAllImports(content).concat(matchedRequire.findAll(content)).filter(item => matchedRequire.isRelativeModule(item)) || [];\n}\n\nfunction hasRelative(file) {\n\treturn findRelative(file).length;\n}\n\nfunction replaceRelative(source, dist, content, autoWrite) {\n\tconst relativeArr = hasRelative(source);\n\tif(relativeArr.length) {\n\t\tconst filePath = path.dirname(source);\n\t\tconst fileName = path.basename(source);\n\t\tconst distDir = path.dirname(dist);\n\t\tif (!fileName || !content || typeof content !== 'string') {\n\t\t\tthrow('please pass correct source or content info');\n\t\t}\n\t\tconst content = typeof content === 'string' ? content : readContent(source);\n\t\tconst replaceRe = new RegExp(findRelative(content).join('|'), 'g');\n\t\tconst transferContent = content.replace(replaceRe, item => path.join(path.relative(distDir, source), item));\n\t\tif (autoWrite) {\n\t\t\tfs.writeFileSync(dist, transferContent, 'utf-8');\n\t\t}\n\t\treturn transferContent;\n\t}\n\treturn content;\n\n}\n\nexport default {\n\treadContent,\n\tfindRelative,\n\thasRelative,\n\treplaceRelative\n}"]}